--- a/core/util/lnx/os_linux.cpp
+++ b/core/util/lnx/os_linux.cpp
@@ -104,8 +104,12 @@
     for(int i=0; i<cores; i++){
       CPU_SET(i, cpuset);
     }
+#ifdef __GLIBC__
     int err = pthread_attr_setaffinity_np(&attrib, CPU_ALLOC_SIZE(cores), cpuset);
     assert(err == 0 && "pthread_attr_setaffinity_np failed.");
+#else
+    int err;
+#endif
     CPU_FREE(cpuset);
 
     err = pthread_create(&thread, &attrib, ThreadTrampoline, args.get());
@@ -121,6 +125,11 @@
       }
     }
 
+#ifndef __GLIBC__
+    err = pthread_setaffinity_np(thread, CPU_ALLOC_SIZE(cores), cpuset);
+    assert(err == 0 && "pthread_setaffinity_np failed.");
+#endif
+
     pthread_attr_destroy(&attrib);
     if (err == 0)
       args.release();
@@ -466,8 +475,10 @@
     assert(false && "rw lock attribute init failed.");
     return nullptr;
   }
+#ifdef __GLIBC__
   err = pthread_rwlockattr_setkind_np(&attrib, PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP);
   assert(err == 0 && "Set rw lock attribute failure.");
+#endif
 
   pthread_rwlock_t* lock = new pthread_rwlock_t;
   err = pthread_rwlock_init(lock, &attrib);
